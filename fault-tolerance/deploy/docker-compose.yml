version: '3.8'

services:
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        environment:
            RABBITMQ_DEFAULT_USER: user
            RABBITMQ_DEFAULT_PASS: password
            RABBITMQ_LOG: debug
        ports:
            - '5672:5672'
            - '15672:15672'
        restart: always
        networks:
            - services-network

    manager-app:
        build:
            context: ../manager
            dockerfile: Dockerfile
        container_name: manager-container
        environment:
            - PORT=3000
            - RABBITMQ_HOST=rabbitmq
            - MONGODB_URI=mongodb://mongo-node-1:27017,mongo-node-2:27017,mongo-node-3:27017/hashcracker_db?replicaSet=rs0
        ports:
            - '3000:3000'
        depends_on:
            - rabbitmq
            - mongo-init
        restart: always
        networks:
            - services-network

    worker-app:
        build:
            context: ../worker
            dockerfile: Dockerfile
        environment:
            - PORT=3001
            - RABBITMQ_HOST=rabbitmq
        deploy:
            replicas: 3
        networks:
            - services-network
        depends_on:
            - rabbitmq

    mongo-node-1:
        image: mongo
        container_name: mongo-node-1
        command: ['mongod', '--replSet', 'rs0', '--bind_ip_all']
        ports:
            - '27017:27017'
        volumes:
            - mongo-node-1_data:/data/db
        restart: always
        networks:
            - services-network

    mongo-node-2:
        image: mongo
        container_name: mongo-node-2
        command: ['mongod', '--replSet', 'rs0', '--bind_ip_all']
        ports:
            - '27018:27017'
        volumes:
            - mongo-node-2_data:/data/db
        depends_on:
            - mongo-node-1
        restart: always
        networks:
            - services-network

    mongo-node-3:
        image: mongo
        container_name: mongo-node-3
        command: ['mongod', '--replSet', 'rs0', '--bind_ip_all']
        ports:
            - '27019:27017'
        volumes:
            - mongo-node-3_data:/data/db
        depends_on:
            - mongo-node-1
        restart: always
        networks:
            - services-network

    mongo-init:
        image: mongo:5.0
        container_name: mongo-init
        depends_on:
            - mongo-node-1
        entrypoint: >
            bash -c "until mongo --host mongo-node-1:27017 --eval 'print(\"waiting for mongo-node-1\")'; do sleep 5; done &&
                    mongo --host mongo-node-1:27017 --eval 'rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"mongo-node-1:27017\"},{_id:1,host:\"mongo-node-2:27017\"},{_id:2,host:\"mongo-node-3:27017\"}]})'"
        networks:
            - services-network

    mongo-express:
        image: mongo-express
        container_name: mongo-express
        restart: always
        ports:
            - '8081:8081'
        environment:
            - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
            - ME_CONFIG_MONGODB_URL=mongodb://mongo-node-1:27017
        depends_on:
            - mongo-node-1
        networks:
            - services-network

networks:
    services-network:
        driver: bridge

volumes:
    mongo-node-1_data:
    mongo-node-2_data:
    mongo-node-3_data:
